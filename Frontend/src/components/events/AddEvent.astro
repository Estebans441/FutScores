---
import { getBackendHost, getMatchById } from "../../backend/matchesService";
import { createEvent, getEventTypes } from "../../backend/matchEventService";
import { type Match } from "../../types/match";
interface Props {
  matchId: number;
}

interface EventType {
  eventType: string;
  display: string;
}
interface MatchTeam {
  display: string;
  teamName: string;
}

const { matchId } = Astro.props;

const match: Match | undefined = await getMatchById(matchId);
const events: EventType[] = getEventTypes();
const BACKEND_HOST = getBackendHost();

if (!match) {
  throw new Error("Match not found");
}

const teams: MatchTeam[] = [
  { display: "LOCAL - " + match.homeTeam, teamName: match.homeTeam },
  { display: "VISITANTE - " + match.awayTeam, teamName: match.awayTeam },
];

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    await createEvent(
      {
        id: -1,
        matchId: matchId,
        team: (data.get("team") as string) ?? "",
        type: data.get("type") as string,
        player: data.get("player") as string,
        minute: parseInt(data.get("minute") as string),
      },
      BACKEND_HOST
    );
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<form class="event-form" method="POST">
  <label for="team">Equipo</label>
  <select id="team" name="team" required>
    {
      teams.map((team: MatchTeam) => (
        <option value={team.teamName}>{team.display}</option>
      ))
    }
  </select>

  <label for="type">Evento</label>
  <select id="type" name="type" required>
    {
      events.map((event: EventType) => (
        <option value={event.eventType}>{event.display}</option>
      ))
    }
  </select>

  <label for="player">Jugador:</label>
  <input type="text" id="player" name="player" />

  <label for="minute">Minuto:</label>
  <input type="number" id="minute" name="minute" required />

  <button type="submit" class="submit-btn">Publicar evento</button>
</form>

<style>
  /* General page styles */
  .event-form {
    display: flex;
    flex-direction: column;
    max-width: 400px;
    margin: 0 auto;
    background-color: #f7fdf4; /* Light green background */
    padding: 20px;
    margin-top: 60px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .event-form label {
    margin-top: 15px;
    color: #004d00; /* Dark green color for labels */
    font-weight: bold;
  }

  .event-form select,
  .event-form input {
    padding: 8px;
    margin-top: 5px;
    border: 1px solid #cce7cc; /* Light green border */
    border-radius: 4px;
    font-size: 16px;
  }

  .event-form select:focus,
  .event-form input:focus {
    outline: none;
    border-color: #66cc66; /* Highlighted border on focus */
  }

  .submit-btn {
    background-color: #28a745; /* Green button */
    color: white;
    border: none;
    border-radius: 4px;
    padding: 10px;
    margin-top: 20px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s ease;
  }

  .submit-btn:hover {
    background-color: #218838; /* Darker green on hover */
  }

  @media (max-width: 600px) {
    .event-form {
      padding: 15px;
    }
  }
</style>
