---
import { getEvents } from "../../services/eventsService";
import { type Match } from "../../types/match";

interface Props { match : Match;}

const { match } = Astro.props;

const events = await getEvents();
const { homeTeam: localTeamId } = match;

const eventIcons: { [key: string]: string } = {
  "goal": '/event_icons/gol.png',
  "penalty": '/event_icons/penal.png',
  "red card": '/event_icons/roja.png',
  "yellow card": '/event_icons/amarilla.png',
  "substitution": '/event_icons/cambio.png',
  "offside": '/event_icons/fuera.png',
  "corner kick": '/event_icons/esquina.png',
  "free kick": '/event_icons/libre.png',
  "start": '/event_icons/tiempo.png',
  "half-time": '/event_icons/tiempo.png',
  "end": '/event_icons/tiempo.png'
};

const eventDescriptions: { [key: string]: string } = {
  "goal": 'Gol de',
  "penalty": 'Penalti de',
  "red card": 'Tarjeta roja para',
  "yellow card": 'Tarjeta amarilla para',
  "substitution": 'Cambio de',
  "offside": 'Fuera de juego de',
  "corner kick": 'Tiro de esquina de',
  "free kick": 'Tiro libre de',
  "start": 'Inicio del tiempo',
  "half-time": 'Medio tiempo',
  "end": 'Fin del tiempo'
};
---

<div class="timeline">
  {events.map((event) => (
    <div class={`event ${event.team === localTeamId ? 'left' : 'right'}`}>
      {event.team === localTeamId && (
        <div class="event-content">
          <span class="description">{eventDescriptions[event.type]} {event.player}</span>
          <img src={eventIcons[event.type]} alt={event.type} class="icon" />
        </div>
      )}
      <span class="minute">{event.minute}'</span>
      {event.team !== localTeamId && (
        <div class="event-content">
          <img src={eventIcons[event.type]} alt={event.type} class="icon" />
          <span class="description">{eventDescriptions[event.type]} {event.player}</span>
        </div>
      )}
    </div>
  ))}
</div>

<style>
  .timeline {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    width: 100%;
    background-color: #ffffff; /* Fondo claro */
    padding: 20px;
  }

  .event {
    display: flex;
    align-items: center;
    margin: 10px 0;
    position: relative;
    width: 100%;
    max-width: 600px;
  }

  .event.left {
    justify-content: flex-start;
  }

  .event.right {
    justify-content: flex-end;
  }

  .minute {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    background: #4CAF50; /* Fondo verde */
    color: #ffffff; /* Texto blanco */
    padding: 10px;
    border-radius: 50%;
    border: 2px solid #4CAF50; /* Borde verde */
    font-weight: bold;
    width: 40px;
    height: 40px; /* Alto igual al ancho para un círculo perfecto */
    text-align: center;
    line-height: 20px; /* Alineación vertical del texto */
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .event-content {
    display: flex;
    align-items: center;
    background: #f0f5f0; /* Fondo blanco para el contenido */
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #4CAF50; /* Borde verde */
    margin: 0 10px;
  }

  .description {
    font-size: 14px;
    margin-right: 8px;
    color: #333; /* Texto oscuro */
  }

  .icon {
    width: 20px;
    height: 20px;
    margin-right: 8px;
  }

  .event.left .event-content {
    justify-content: flex-end;
  }

  .event.right .event-content {
    justify-content: flex-start;
  }
</style>
